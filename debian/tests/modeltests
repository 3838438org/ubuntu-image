#!/usr/bin/python3

import os

from contextlib import ExitStack
from subprocess import PIPE, run

TMP = os.environ['AUTOPKGTEST_TMP']
DIR = os.path.abspath(os.path.join('debian', 'tests', 'models'))


for model_file in os.listdir(DIR):
    base, suffix = os.path.splitext(model_file)
    if suffix != '.assertion':
        continue
    # Build the image.
    disk_img = os.path.join(TMP, '{}.img'.format(base))
    model_assertion = os.path.join(DIR, model_file)
    run(['ubuntu-image', '-c', 'edge', '-o', disk_img, model_assertion])
    # Now try to mount every partition in the resulting disk image.  First,
    # what will the loop mounts be called?
    proc = run(['kpartx', '-lv', disk_img],
               stdout=PIPE,
               universal_newlines=True)
    loops = []
    for line in proc.stdout.splitlines():
        loops.append('/dev/mapper/{}'.format(line.split()[0]))
    with ExitStack() as resources:
        run(['kpartx', '-avs', disk_img])
        resources.callback(run, ['kpartx', '-dv', disk_img])
        for i, src in enumerate(loops):
            dst = os.path.join(TMP, 'mnt{}'.format(i))
            os.mkdir(dst)
            resources.callback(os.rmdir, dst)
            run(['mount', src, dst])
            resources.callback(run, ['umount', dst])
