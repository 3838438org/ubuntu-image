#!/usr/bin/python3

"""Test that we can create an image from a model and it will boot.

We use QEMU to boot the image created by ubuntu-image.

When creating the image, pass an extra snap that implements a very simple case
swapping echo service.  This service starts on image boot and listens on port
8888 of the guest.  That port gets forwarded to the host so that the
autopkgtest (i.e. this script) can connect to it.  We send the echo server some
bytes data and check the response.

NOTE: This test only runs on amd64!
"""

import os
import re
import time
import platform

from contextlib import ExitStack
from datetime import datetime, timedelta
from json import dumps, loads
from pprint import pprint
from random import randrange
from socket import create_connection
from subprocess import run
from tempfile import TemporaryDirectory
from threading import Thread


TMP = os.environ['AUTOPKGTEST_TMP']
DIR = os.path.abspath(os.path.join('debian', 'tests', 'models'))
ECHO_TIMEOUT = 60 * 5 # the VM can be slow
NEWLINE = b'\n'
GREETING = b'this is the autopkgtest boot test'

snapdir = os.path.join('debian', 'tests', 'snaps')
extra_snaps = [
    os.path.abspath(os.path.join(snapdir, snap))
    for snap in os.listdir(snapdir)
    if re.match('echo-service_[.0-9]+_amd64.snap', snap)
    ]
assert len(extra_snaps) == 1, extra_snaps
extra_snap = extra_snaps[0]


def qemu(image):
    run(['qemu-system-x86_64',
         '-nographic',
         '-m', '500M',
         '-netdev', 'user,id=mynet0,hostfwd=::8888-:8888,hostfwd=::9922-:22',
         '-device', 'e1000,netdev=mynet0',
         '-drive', 'file={},index=0,media=disk,format=raw'.format(image),
         '-cpu', 'qemu64,-vmx',
         ],
        check=True)


def build_image():
    # Use ubuntu-image to create an image with a local extra snap that
    # implements an echo service.  This service starts on image boot.
    image_file = os.path.join(TMP, 'image-file-list.txt')
    run(['ubuntu-image',
         '--image-file-list', image_file,
         '--output-dir', TMP,
         '--extra-snaps', extra_snap,
         os.path.join(DIR, 'pc-amd64-model.assertion')],
        check=True)
    with open(image_file, 'r', encoding='utf-8') as fp:
        images = [line.rstrip() for line in fp.readlines()]
        assert len(images) == 1, images
    return images[0]


def main():
    # First off, can we even run the test on this architecture?
    if platform.machine() != 'x86_64':
        # We can't but it makes no sense to fail.
        sys.exit(0)
    image = build_image()
    with ExitStack() as resources:
        thread = Thread(target=qemu, args=(image,))
        thread.daemon = True
        thread.start()
        # Connect to the echo service.  There are lots of factors for why this
        # can be slow and/or temporarily fail.  Basically, the echo-service
        # snap won't start responding until the bring-up-network snap succeeds
        # in calling netplan to initialize the inner VM's network.  Just keep
        # trying for a while until it succeeds, each time with a fresh
        # connection.
        until = datetime.now() + timedelta(seconds=ECHO_TIMEOUT)
        while datetime.now() < until:
            try:
                # No, the timeout argument to this function does *not* handle
                # ConnectionRefusedErrors.
                with create_connection(('localhost', 8888)) as conn:
                    conn.sendall(GREETING)
                    response = conn.recv(4096)
                    # If we got this far, we talked to something.
                    break
            except (ConnectionResetError, ConnectionRefusedError):
                time.sleep(0.5)
        else:
            raise RuntimeError('Cannot connect to SSH port')
        assert response == GREETING, response


main()
